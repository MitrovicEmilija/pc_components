name: Frontend CI

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main
      - production

jobs:
  # Gradnja frontenda
  build-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: pc-components/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('pc-components/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      - name: Install dependencies
        run: |
          cd pc-components
          npm ci

      - name: Build application
        run: |
          cd pc-components
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: pc-components/build/

  # Testiranje frontenda
  test-frontend:
    needs: build-frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: pc-components/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('pc-components/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      - name: Install dependencies
        run: |
          cd pc-components
          npm install

      - name: Run tests with coverage
        run: |
          cd pc-components
          npm run test:ci

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: pc-components/coverage/

  # SonarCloud analiza
  sonarcloud-analysis:
    needs: test-frontend
    runs-on: ubuntu-latest
    environment:
      name: Development
    if: github.ref == 'refs/heads/main' 

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install dependencies
        run: |
          cd pc-components
          npm ci

      - name: Collect coverage (React-specific)
        run: |
          cd pc-components
          npm run test:ci -- --coverage
        env:
          CI: true

      - name: Upload coverage report
        run: |
          cp pc-components/coverage/lcov.info .

      - name: Run SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=${{ secrets.PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.ORGANIZATION_KEY }} \
            -Dsonar.analysis.mode=manual \
            -Dsonar.sources=pc-components \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  # Build and push Docker image to Docker Hub
  docker-deploy:
    needs: sonarcloud-analysis
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'development' || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Debug Directory Structure
        run: |
          echo "Current Directory: $(pwd)"
          echo "Listing files:"
          ls -R

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-react-frontend:${{ github.ref == 'refs/heads/main' && 'dev' || 'prod' }} -f pc-components/Dockerfile .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-react-frontend:${{ github.ref == 'refs/heads/main' && 'dev' || 'prod' }}

  # Deploy to Vercel (for Development only)
  vercel-deploy:
    needs: docker-deploy
    runs-on: ubuntu-latest
    environment:
      name: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Vercel CLI
        run: |
          npm install -g vercel
          export PATH=$PATH:/root/.vercel/bin

      - name: Deploy to Vercel
        run: |
          cd pc-components
          vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --yes

  # Gradnja GitHub pages (for Development only)
  deploy-pages:
    needs: test-frontend
    runs-on: ubuntu-latest
    permissions:
      contents: write
    environment:
      name: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
